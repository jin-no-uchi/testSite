{"version":3,"sources":["TopPage/tom_prof_pic1024x1024.jpg","TopPage/Header.js","TopPage/TopPageBody.js","TopPage/TopPageFooter.js","TopPage/TopPage.js","serviceWorker.js","index.js"],"names":["module","exports","Header","class","id","href","TopPageBody","src","profImg","TopPageFooter","TopPage","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,mD,0ICoB5BC,MAhBf,WACI,OACI,6BACI,4BAAQC,MAAM,SAAUC,GAAG,OACvB,uBAAGC,KAAK,OAAOF,MAAM,aAArB,qHACA,yBAAKA,MAAM,eACP,yBAAKA,MAAM,cAAa,uBAAGE,KAAK,aAAR,6BACxB,yBAAKF,MAAM,cAAa,uBAAGE,KAAK,oBAAR,+BACxB,yBAAKF,MAAM,cAAa,uBAAGE,KAAK,oBAAR,+CACxB,yBAAKF,MAAM,cAAa,uBAAGE,KAAK,YAAR,6C,gBC8B7BC,MAvCf,WACI,OACI,yBAAKH,MAAM,eACP,yBAAKA,MAAM,wBACP,wBAAIC,GAAG,WAAWD,MAAM,kBAAxB,4BACA,wBAAIA,MAAM,mBAAV,0DACA,6BACA,0EACA,yBAAKA,MAAO,mBACR,yBAAKI,IAAKC,IAASL,MAAO,yBAC1B,yBAAKA,MAAM,uBACP,uGACA,6HAIZ,yBAAKA,MAAM,eACP,wBAAIC,GAAG,mBAAP,8BAGA,oDAIJ,yBAAKD,MAAM,eACP,wBAAIC,GAAG,mBAAP,8CACA,oDAKJ,yBAAKD,MAAM,eACP,wBAAIA,MAAM,WAAV,wCACA,sDC7BDM,MANf,WACI,OACI,+BCcOC,MAZf,WACE,OACE,yBAAKP,MAAM,QACT,kBAAC,EAAD,MACA,yBAAKQ,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e8c8ef2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tom_prof_pic1024x1024.7184bafc.jpg\";","import React from 'react';\r\n\r\nimport './TopPage.css';\r\n\r\nfunction Header(){\r\n    return (\r\n        <div>\r\n            <header class=\"Header\"  id=\"top\">\r\n                <a href=\"#top\" class=\"HeaderTop\">陣之内商店｜EC販売とWEBコンテンツ制作事業</a>\r\n                <div class=\"HeaderMenus\">\r\n                    <div class=\"HeaderMenu\"><a href=\"#overview\">会社概要</a></div>\r\n                    <div class=\"HeaderMenu\"><a href=\"#ecSalesBusiness\">EC販売事業</a></div>\r\n                    <div class=\"HeaderMenu\"><a href=\"#contentCreation\">コンテンツ制作</a></div>\r\n                    <div class=\"HeaderMenu\"><a href=\"#contact\">お問い合わせ</a></div>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport profImg from './tom_prof_pic1024x1024.jpg';\r\nimport \"./TopPage.css\";\r\n\r\nfunction TopPageBody(){\r\n    return (\r\n        <div class=\"toppagebody\">\r\n            <div class=\"overview mainContent\">\r\n                <h1 id=\"overview\" class=\"overviewHeader\">会社概要</h1>\r\n                <h2 class=\"overviewHeader2\">陣之内商店について</h2>\r\n                <br />\r\n                <h3>代表よりご挨拶</h3>\r\n                <div class =\"TopPageGreeting\">\r\n                    <img src={profImg} class =\"TopPageGreetingImage\" />\r\n                    <div class=\"TopPageGreetingText\">\r\n                        <p>お世話になっております。</p>\r\n                        <p>陣之内商店 代表の陣内智徳です。</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"mainContent\">\r\n                <h1 id=\"ecSalesBusiness\">\r\n                    EC販売事業\r\n                </h1>\r\n                <p>\r\n                    there is no content.\r\n                </p>\r\n            </div>\r\n            <div class=\"mainContent\">\r\n                <h1 id=\"contentCreation\">コンテンツ作成</h1>\r\n                <p>\r\n                    there is no content.\r\n\r\n                </p>\r\n            </div>\r\n            <div class=\"mainContent\">\r\n                <h1 class=\"contact\">お問い合わせ</h1>\r\n                <p>there is no content.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopPageBody;\r\n","import React from 'react';\r\n\r\nfunction TopPageFooter(){\r\n    return (\r\n        <div></div>\r\n    );\r\n}\r\n\r\nexport default TopPageFooter;\r\n","import React from 'react';\nimport Header from './Header.js';\nimport TopPageBody from './TopPageBody.js';\nimport TopPageFooter from './TopPageFooter.js';\nimport './TopPage.css';\n\nfunction TopPage() {\n  return (\n    <div class=\"Page\">\n      <Header />\n      <div className=\"TopPage\">\n        <TopPageBody />\n        <TopPageFooter />\n      </div>\n    </div>\n  );\n}\n\nexport default TopPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TopPage from './TopPage/TopPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TopPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}